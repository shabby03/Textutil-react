{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","rows","value","backgroundColor","onChange","e","target","newText","showAlert","newLo","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.aca1e7c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize=(word)=>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    \r\n      props.alert && <div className={`alert alert-{${props.alert.type}} alert-dismissible fade show text-dark bg-warning`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react'\r\nimport propTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li> */}\r\n      </ul>\r\n\r\n        {/* Green Mode */}\r\n  {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleGreenMode}/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Green Mode</label>\r\n  </div> */}\r\n\r\n      {/* dark mode */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n  </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={           \r\n  title:propTypes.string.isRequired,\r\n  aboutText:propTypes.string.isRequired\r\n}\r\n\r\n// Navbar.defaultProps={ //In case if we forget to declare the name then default values will be shown\r\n//   title:'Set Title Here',\r\n//   aboutText:'About'\r\n// }\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const[text,setText]=useState(\"\");\r\n  \r\n  const handleUpClick=()=>{\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  }\r\n\r\n  const handleLoClick=()=>{\r\n    let newLo=text.toLowerCase();\r\n    setText(newLo);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n  }\r\n\r\n  const handleClearClick=()=>{\r\n    let newText='';\r\n    setText(newText);\r\n    props.showAlert(\"You Text has been Cleared\",\"success\");\r\n  }\r\n\r\n  const handleTitleClick=()=>{\r\n    let newText=text.charAt(0).toUpperCase()+text.slice(1);\r\n    setText(newText);\r\n    props.showAlert(\"Converted the First Letter to Capital\",\"success\");\r\n  }\r\n\r\n  const handleCopy=()=>{\r\n    var text=document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\",\"success\");\r\n  }\r\n  \r\n  const handleExtraSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\",\"success\");\r\n  }\r\n\r\n  const handleOnChange=(e)=>{\r\n    setText(e.target.value);\r\n  }\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#1a3763'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" id=\"mybox\" rows=\"3\" value={text}\r\n      style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#1a3763'}} \r\n      onChange={handleOnChange}></textarea>\r\n   </div>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleTitleClick}>Convert to TitleCase</button>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n   <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n   </div>\r\n   <div className=\"container my-2\" style={{color:props.mode==='dark'?'white':'#1a3763'}}>\r\n     <h2>Yout Text Summary</h2>\r\n     <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n     <p>{0.008*text.split(\" \").length} Minutes Read</p>\r\n     <h2>Preview</h2>\r\n     <p>{text.length>0?text:\"Enter Something in the Text Box Above to Preview it Here\"}</p>\r\n   </div>\r\n    </>\r\n\r\n  )\r\n}\r\n","import React,{useState} from 'react';\nimport './App.css';\n// import About from './Components/About';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  // const [gMode,setGMode]=useState('light');\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 5000);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#1a3763';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n      document.title='TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\",\"success\");\n      document.title='TextUtils - Light Mode';\n    }\n  }\n\n  // const toggleGreenMode=()=>{\n  //   if(mode==='light'){\n  //     setMode('green');\n  //     document.body.style.backgroundColor = 'rgb(77 191 73)';\n  //     showAlert(\"Green Mode Has Been Enabled\",\"success\");\n  //   }\n  //   else if(mode==='dark'){\n  //     setMode('green');\n  //     document.body.style.backgroundColor='rgb(77 191 73)';\n  //     showAlert(\"Green Mode Has Been Enabled\",\"success\");\n  //   }\n  //   else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor='white';\n  //     showAlert(\"Light Mode Has Been Enabled\",\"success\");\n  //   }\n  // }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      {/* <Switch> */}\n        {/* <Route path=\"/about\"><About/> </Route> */}\n        {/* <Route path=\"/\"> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n        {/* </Route> */}\n   {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}